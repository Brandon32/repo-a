name: Merge to Repo B

on:
  push:
    branches:
      - main

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Check out Repo A
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Set up Git
        run: |
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Merge changes to Repo B
        run: |
          # Check if there are any changes in .github folder or fstab.yaml file
          git diff --exit-code -- . ':!.github' ':!fstab.yaml'
          CHANGES=$?

          if [ $CHANGES -ne 0 ]; then
            echo "There are changes in .github folder or fstab.yaml file. Ignoring merge to Repo B."
          else
            git remote add repo-b https://github.com/sukamat/repo-b.git
            git fetch repo-b main

            # Attempt to merge changes from repo-b/main into temp-branch
            git checkout -b temp-branch
            git merge repo-b/main

            # Check for merge conflicts
            CONFLICTS=$(git ls-files -u)

            if [ -n "$CONFLICTS" ]; then
              echo "Merge conflicts found. Resolving conflicts and force pushing changes."
              # Resolve conflicts (you can use your preferred conflict resolution tool or script here)
              # For simplicity, we are using the default strategy here.
              git merge --abort
              git merge -s recursive -Xtheirs repo-b/main
              git commit -m "Merge changes from Repo A to Repo B (conflict resolution)"
              git push -f origin temp-branch
              hub pull-request -m "Merge changes from Repo A to Repo B"
            else
              echo "No merge conflicts found. Pushing changes to Repo B."
              git push origin temp-branch
              hub pull-request -m "Merge changes from Repo A to Repo B"
            fi
          fi
